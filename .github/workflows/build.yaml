name: Build
on: push

env:
  # shared paths for all builds
  TOOLS_PATH: ${{ github.workspace }}/tools
  INSTALL_PATH: ${{ github.workspace }}/install
  PKG_CONFIG_PATH: ${{ github.workspace }}/install/lib/pkgconfig
  INCLUDE: ${{ github.workspace }}/install/include
  LIBPATH: ${{ github.workspace }}/install/lib
  LINK: "/LIBPATH:${{ github.workspace }}/install/lib"
  # tools: pkg-config, win_flex_bison
  PKG_CONFIG_RELEASE: https://nirbheek.in/files/binaries/pkg-config/win32/pkg-config.exe
  WIN_FLEX_BISON_RELEASE: https://github.com/lexxmark/winflexbison/releases/download/v2.5.25/win_flex_bison-2.5.25.zip
  # libraries to build
  LIBXML2_RELEASE: https://download.gnome.org/sources/libxml2/2.13/libxml2-2.13.0.tar.xz
  LIBXML2: libxml2-2.13.0
  LIBRSVG_RELEASE: https://download.gnome.org/sources/librsvg/2.58/librsvg-2.58.1.tar.xz
  LIBRSVG: librsvg-2.58.1
  GTK_RELEASE: https://download.gnome.org/sources/gtk/4.15/gtk-4.15.1.tar.xz
  GTK: gtk-4.15.1
  LIBADWAITA_RELEASE: https://download.gnome.org/sources/libadwaita/1.5/libadwaita-1.5.1.tar.xz
  LIBADWAITA: libadwaita-1.5.1

jobs:
  build:
    name: Build GNOME Stack
    runs-on: windows-latest
    steps:
    # tools setup: meson, pkg-config, win_flex_bison, MSVC
    - name: Setup Meson latest
      run: pip install --upgrade meson ninja
    - name: Setup pkg-config
      run: |
        mkdir tools
        curl "$env:PKG_CONFIG_RELEASE" -o tools/pkg-config.exe
        echo "$env:TOOLS_PATH" >> $env:GITHUB_PATH
        echo "$env:INSTALL_PATH/bin" >> $env:GITHUB_PATH
    - name: Setup win_flex_bison
      run: |
        curl -L "$env:WIN_FLEX_BISON_RELEASE" -o tools/win_flex_bison.zip
        python -m zipfile -e tools/win_flex_bison.zip tools/win_flex_bison
        echo "$env:TOOLS_PATH/win_flex_bison" >> $env:GITHUB_PATH
    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64
    # build GTK bundle
    - name: Fetch and Build GTK
      run: |
        curl -L -O "$env:GTK_RELEASE"
        cmake -E tar xf "$env:GTK.tar.xz"
        cd "$env:GTK"
        meson setup builddir --prefix="$env:INSTALL_PATH" --buildtype=release -Dbuild-tests=false -Dmedia-gstreamer=disabled -Dvulkan=disabled
        meson install -C builddir
    # build librsvg
    # .. build libxml2
    - name: Fetch and Build libxml2
      run: |
        curl -L -O "$env:LIBXML2_RELEASE"
        cmake -E tar xf "$env:LIBXML2.tar.xz"
        cmake -S "$env:LIBXML2" -B "$env:LIBXML2/build" -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX="$env:INSTALL_PATH" -DLIBXML2_WITH_ICONV=OFF -DLIBXML2_WITH_LZMA=OFF -DLIBXML2_WITH_PYTHON=OFF -DLIBXML2_WITH_ZLIB=OFF
        cmake --build "$env:LIBXML2/build" --config Release
        cmake --install "$env:LIBXML2/build"
        cp "$env:INSTALL_PATH/lib/libxml2s.lib" "$env:INSTALL_PATH/lib/libxml2.lib"
        cp "$env:INSTALL_PATH/lib/libxml2s.lib" "$env:INSTALL_PATH/lib/xml2.lib"
    # .. build librsvg
    - name: Fetch and Build librsvg
      env:
        LIBRSVG_PATH: ${{ github.workspace }}/${{ env.LIBRSVG }}
      run: |
        curl -L -O "$env:LIBRSVG_RELEASE"
        cmake -E tar xf "$env:LIBRSVG.tar.xz"
        cd "$env:LIBRSVG"
        cargo build --release
        cp target/release/librsvg.lib $env:INSTALL_PATH/lib/librsvg.lib
        cp win32/config.h.win32 include/config.h
        cd gdk-pixbuf-loader
        cl /Fe:pixbufloader-svg /MD /I$env:LIBRSVG_PATH/include /I$env:INSTALL_PATH/include /I$env:INSTALL_PATH/include/gtk-4.0 /I$env:INSTALL_PATH/include/pango-1.0 /I$env:INSTALL_PATH/include/glib-2.0 /I$env:INSTALL_PATH/lib/glib-2.0/include /I$env:INSTALL_PATH/include/cairo /I$env:INSTALL_PATH/include/gdk-pixbuf-2.0 /I$env:INSTALL_PATH/include/graphene-1.0 /I$env:INSTALL_PATH/lib/graphene-1.0/include /O2 /utf-8 io-svg.c /DGDK_PIXBUF_ENABLE_BACKEND /LD gdk_pixbuf-2.0.lib glib-2.0.lib gobject-2.0.lib librsvg.lib pango-1.0.lib cairo.lib gio-2.0.lib cairo-gobject.lib pangocairo-1.0.lib xml2.lib /link /LIBPATH:$env:INSTALL_PATH/lib ws2_32.lib bcrypt.lib advapi32.lib userenv.lib
        cp pixbufloader-svg.lib $env:INSTALL_PATH/lib/gdk-pixbuf-2.0/2.10.0/loaders
        cp pixbufloader-svg.dll $env:INSTALL_PATH/lib/gdk-pixbuf-2.0/2.10.0/loaders
        gdk-pixbuf-query-loaders --update-cache
    # build libadwaita
    - name: Fetch and Build libadwaita
      run: |
        curl -L -O "$env:LIBADWAITA_RELEASE"
        cmake -E tar xf "$env:LIBADWAITA.tar.xz"
        cd "$env:LIBADWAITA"
        meson setup builddir --prefix="$env:INSTALL_PATH" --buildtype=release -Dvapi=false
        meson install -C builddir
    # finish build and upload artifact
    - uses: actions/upload-artifact@v3
      with:
        name: gtk-msvc-release
        path: ${{ env.INSTALL_PATH }}
